--select top 3 * from customers
--select top 3 * from orders
--select top 3 * from books


------###Sales and Insights###------

---1. Total revenue generated by the book store?
select round(sum(Total_Amount),2) as revenue from orders

---2.which genre has the highest total sales revenue?
select  Genre, sum(Total_Amount) as revenue
from orders
join books on orders.Book_ID = books.Book_ID
group by Genre
order by revenue desc

---3. Who and from where are the top 5 customers based on the average total purchsed amount?
select top 5  Name, avg(Total_Amount) as avg_revenue, Country from customers as c
join orders as o on c.Customer_ID =o.Customer_ID
group by Name, Country
order by avg_revenue desc

---4. what is the average price for each price range ?
select price_range, round(avg(Price),2) as avg_price from books
group by price_range
order by avg_price desc

---5. what is the average price for book genre?
select Genre, round(avg(Price),2) as avg_price from books
group by Genre
order by avg_price desc

---6. Top 5 countries which contribute the most to sales revenue?
select top 5 Country, sum(Total_Amount) as revenue from customers as cus
join orders as o on cus.Customer_ID =o.Customer_ID
group by Country
order  by revenue desc

---7. which price_ranges has the highest total sales revenue?
select  price_range, sum(Total_Amount) as revenue
from orders
join books on orders.Book_ID = books.Book_ID
group by price_range
order by revenue desc



------###Customer Behaviour and Insights###------

---8. Top 5 countries with highest number of customers?
select top 5 Country, count(*) as customer from customers 
group by Country
order  by customer desc

---9. How many books on average does a customer from each country purchase?
select  Country, avg(Quantity) as  avg_purchases from customers as cus
join orders as o on cus.Customer_ID =o.Customer_ID
group by Country
order  by avg_purchases desc

---10. Top 1 Most famous genre in each country
--row_number will not look for ties unique values is given 1 , duplicate/ties values are given different numbers. 
--rank will take care of ties, unique values is given 1 but the ties all given the same numbers.
with cte as (
select *, count(*) as total_num, row_number() over(partition by c.Country
order by count(*) desc) as row_rank
from (
select a.Country, b.Genre from books  as b join (
select customers.Customer_ID, Country, Book_ID from customers
join orders on customers.Customer_ID =orders.Customer_ID) as a
on b.Book_ID = a.Book_ID
) as c 
group by c.Country, c.Genre
) 

select Country, Genre, total_num from cte
where row_rank =1




---11. How many customers are there with more than one order?
select cus.Customer_ID,Name,  count(o.Order_ID) as book_orders from customers as cus
join orders as o on cus.Customer_ID =o.Customer_ID
group by cus.Customer_ID, Name
having count(o.Order_ID)>1

---12. Which customers never placed an order?
select * from customers
where Customer_ID not in (select Customer_ID from orders)



------###Book-level Analytics###------

---13. Which are the top 10 best selling books?
select top 10 Title, avg(o.Quantity) as avg_books_sold 
from orders as o
join books on o.Book_ID = books.Book_ID
group by Title
order by avg_books_sold desc


---14. What is the most expensive book ever sold?
select * from books where Price =(
select max(Price) from books)


---15. How many books have never been ordered?
select count(*) as books_never_ordered from books 
where Book_ID not in 
(select Book_ID from orders)

---16. Which authors have the most books sold?
select top 10 Author, sum(o.Quantity) as books_sold from books as b
join orders as o on b.Book_ID =o.Order_ID
group by Author
order by books_sold desc 

---17. Average number of books sold per genre?
select  Genre, avg(o.Quantity) as avg_books_sold 
from orders as o
join books on o.Book_ID = books.Book_ID
group by Genre
order by avg_books_sold desc

---18. count the number of books in each price range
select  price_range, count(book_id) as book_count 
from books
group by price_range
order by book_count desc

---19.How many books have been sold in this price range
select b.price_range, sum(o.Quantity) as num_of_books from books as b
 join orders  as o on o.Book_ID =b.Book_ID 
group by price_range
order by num_of_books desc 


------###Advanced / Analytical SQL###------

---20. Rank Genres per country based on popularity use rank
select *, RANK() over(partition by Country order by books_ordered desc) as popularity from (
select a.Country,Genre, count(*) as books_ordered from books as b join (
select Country,Book_ID from customers
join orders on customers.Customer_ID=orders.Customer_ID) as a
on b.Book_ID =a.Book_ID
group by a.Country, Genre
) as c
--Genres ordered the same number of times share the popularity


---21. Rank the Top 1 book sold in each country use row_number

with cte as (
select *,  row_number () over(partition by Country order by books_sold desc) as popularity from (
select a.Country,Title, sum(Quantity) as books_sold from books as b join (
select Country,Book_ID, Quantity from customers
join orders on customers.Customer_ID=orders.Customer_ID) as a
on b.Book_ID =a.Book_ID
group by a.Country, Title
) as c
)
select * from cte
where popularity=1

---22. Calculate customer lifetime values (Total spend per customer)
select Name, round(sum(o.Total_Amount),2) as total_spend
from customers as c
join orders as o  on c.Customer_ID=o.Customer_ID
group by Name
order by total_spend desc


---23. Get rolling monthly revenue ( 3-months revenue)

select *, 
sum(month_revenue) over (order by date asc rows between 2 preceding and current row ) as rolling_3months  from (
select datefromparts(year(order_date),MONTH(order_date),1) as date, sum(Total_Amount) as month_revenue
from orders
group by datefromparts(year(order_date),MONTH(order_date),1)
) as a



---24. Find the books whose price is above the avg price in their genre (Correlated sub-query)
select Title, Genre from books as b1
where b1.Price >( select avg(b2.price) as avg_price from books as b2
where b1.Genre =b2.Genre
)
---in case you want to print the average price as well

with cte as (
select Genre, round(avg(Price),2) as avg_price from books
group by Genre
)

select cte.Genre, Title, avg_price, Price from cte 
join books on cte.Genre =books.Genre
where Price> avg_price


------### Time Series Analytics###------

---25. What are the monthly sales trend/ Month-over-Month Revenue Growth

select *, 
case  prev_month_sales 
when null then null 
else round(((sales-prev_month_sales)/prev_month_sales)*100,2) end as percent_change
from (
select *, lag(sales) over (order by my_date) as prev_month_sales from (
select datefromparts(year(Order_Date),month(Order_Date),1) as my_date, sum(Total_Amount) as sales from orders
join books on orders.Book_ID=books.Book_ID
group by datefromparts(year(Order_Date),month(Order_Date),1)
) as a
) as b


---26. Which month had the highest revenue?
select 
case  month_num  when 1 then 'JAN'
when 2 then 'FEB'
when 3 then 'MAR'
when 4 then 'APR'
when 5 then 'MAY'
when 6 then 'JUN'
when 7 then 'JUL'
when 8 then 'AUG'
when 9 then 'SEPT'
when 10 then 'OCT'
when 11 then 'NOV'
when 12 then 'DEC' end as month_name , revenue
from (
select MONTH(Order_Date) as month_num
,sum(Total_Amount) as revenue 
from orders
group by MONTH(Order_Date))
as a
order by revenue desc

---27. what is the average order value per month?
select 
case  month_num  when 1 then 'JAN'
when 2 then 'FEB'
when 3 then 'MAR'
when 4 then 'APR'
when 5 then 'MAY'
when 6 then 'JUN'
when 7 then 'JUL'
when 8 then 'AUG'
when 9 then 'SEPT'
when 10 then 'OCT'
when 11 then 'NOV'
when 12 then 'DEC' end as month_name ,
avg_orders 
from (
select MONTH(Order_Date) as month_num
,avg(Quantity) as avg_orders 
from orders
group by MONTH(Order_Date))
as a
order by avg_orders desc

---28. Total Cumulative Revenue grow overtime?

select *, sum(sales) over(order by my_date ) as overtime_revenue  from (
select datefromparts(year(Order_Date),month(Order_Date),1) as my_date, sum(Total_Amount) as sales from orders
join books on orders.Book_ID=books.Book_ID
group by datefromparts(year(Order_Date),month(Order_Date),1)
) as a

---29. For each month, what was the most popular genre?
--row_num is assigned  on each partition and which one will be unique is decided based on order by

with cte as (
select *, ROW_NUMBER() over(partition by my_date order by trend desc) as row_num from (
select datefromparts(year(Order_Date),month(Order_Date),1) as my_date,
Genre , count(*) as trend from orders
join books on orders.Book_ID=books.Book_ID
group by datefromparts(year(Order_Date),month(Order_Date),1), Genre
) as a 
)

select my_date, genre, trend, concat(month(my_date),'/',YEAR(my_date)) as short_date
from cte 
where row_num =1
order by short_date


------### Other Insights###------

---30. get top 10 published year that had more books published

select top 10 Published_Year, count(book_id) as book_count 
from books
group by Published_Year
order by book_count desc

---31. get top 3 most popular genres published in top 10 published years

select top 3 Genre, count(*) as counts from books as b
join (select top 10 Published_Year, count(book_id) as book_count 
from books
group by Published_Year
order by book_count desc) as a
on b.Published_Year = a.Published_Year
group by Genre
order by counts desc


---32. Top 3 genre by top 10 most authors write?

select top 3 Genre, count(*) as num  from books as b
join (select top 10 Author, sum(o.Quantity) as books_sold from books as b
join orders as o on b.Book_ID =o.Order_ID
group by Author
order by books_sold desc ) as a
on b.Author = a.Author
group by Genre 
order by num desc


---33. What were the genres that top 5 purchases by customers 
with cte as(
select a.Customer_ID, Name, o.Book_ID from 
(select top 5 o.Customer_ID, Name, count(*) as orders from customers as c
join orders as o on c.Customer_ID =o.Customer_ID
group by Name,o.Customer_ID
order by orders desc) as a 
join orders as o on a.Customer_ID=o.Customer_ID)

select cte.Customer_ID,Name as customer_name,b.Title, b.Genre from cte
join books as b
on cte.Book_ID =b.Book_ID
order by customer_name asc




